version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: auth-postgres
    environment:
      POSTGRES_DB: ecommerce_auth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - auth-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: auth-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass redis_password
    volumes:
      - redis-data:/data
    networks:
      - auth-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # MailHog (Fake SMTP para testes)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: auth-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - auth-network

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ecommerce_auth
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: redis_password
      SPRING_MAIL_HOST: mailhog
      SPRING_MAIL_PORT: 1025
      JWT_SECRET: ${JWT_SECRET:-404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970}
      MAIL_USERNAME: noreply@ecommerce.com
      MAIL_PASSWORD: ''
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      EUREKA_ENABLED: false
    networks:
      - auth-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

networks:
  auth-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data: